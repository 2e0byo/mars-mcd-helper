{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mars-MCD-helper \u00a4 Utilities for retrieving and processing data from the Mars Climate Database Requirements \u00a4 mars-MCD-helper requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12 Installation \u00a4 With pip : python -m pip install mars-mcd-helper # or python3.7 -m pip install mars-mcd-helper With pipx : python3.7 -m pip install --user pipx pipx install --python python3.7 mars-mcd-helper Usage \u00a4 Several functions are provided. Currently there is no cli interface as I haven't written it yet. from mars_mcd_helper import fetch_data , read_ascii_data outf = fetch_data ( outdir = \".\" , ls = 87.4 ) sections = read_ascii_data ( outf )","title":"Overview"},{"location":"#mars-mcd-helper","text":"Utilities for retrieving and processing data from the Mars Climate Database","title":"mars-MCD-helper"},{"location":"#requirements","text":"mars-MCD-helper requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12","title":"Requirements"},{"location":"#installation","text":"With pip : python -m pip install mars-mcd-helper # or python3.7 -m pip install mars-mcd-helper With pipx : python3.7 -m pip install --user pipx pipx install --python python3.7 mars-mcd-helper","title":"Installation"},{"location":"#usage","text":"Several functions are provided. Currently there is no cli interface as I haven't written it yet. from mars_mcd_helper import fetch_data , read_ascii_data outf = fetch_data ( outdir = \".\" , ls = 87.4 ) sections = read_ascii_data ( outf )","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd mars-mcd-helper make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run mars-mcd-helper [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd mars-mcd-helper make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run mars-mcd-helper [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Macro Rendering Error \u00a4 TypeError : tuple indices must be integers or slices, not str Traceback (most recent call last): File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/mkdocs_macros/plugin.py\", line 434, in render return md_template.render(**page_variables) File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/jinja2/environment.py\", line 1090, in render self.environment.handle_exception() File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/jinja2/environment.py\", line 832, in handle_exception reraise(*rewrite_traceback_stack(source=source)) File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/jinja2/_compat.py\", line 28, in reraise raise value.with_traceback(tb) File \"<template>\", line 1, in top-level template code File \"/home/john/code/mars/docs/macros.py\", line 81, in credits return get_credits() File \"/home/john/code/mars/docs/macros.py\", line 63, in get_credits template_data = get_credits_data() File \"/home/john/code/mars/docs/macros.py\", line 35, in get_credits_data pkg = {_: pkg[_] for _ in (\"name\", \"home-page\")} File \"/home/john/code/mars/docs/macros.py\", line 35, in <dictcomp> pkg = {_: pkg[_] for _ in (\"name\", \"home-page\")} TypeError: tuple indices must be integers or slices, not str","title":"Credits"},{"location":"credits/#macro-rendering-error","text":"TypeError : tuple indices must be integers or slices, not str Traceback (most recent call last): File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/mkdocs_macros/plugin.py\", line 434, in render return md_template.render(**page_variables) File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/jinja2/environment.py\", line 1090, in render self.environment.handle_exception() File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/jinja2/environment.py\", line 832, in handle_exception reraise(*rewrite_traceback_stack(source=source)) File \"/home/john/.cache/pypoetry/virtualenvs/mars-mcd-helper-1cwvvAFm-py3.9/lib/python3.9/site-packages/jinja2/_compat.py\", line 28, in reraise raise value.with_traceback(tb) File \"<template>\", line 1, in top-level template code File \"/home/john/code/mars/docs/macros.py\", line 81, in credits return get_credits() File \"/home/john/code/mars/docs/macros.py\", line 63, in get_credits template_data = get_credits_data() File \"/home/john/code/mars/docs/macros.py\", line 35, in get_credits_data pkg = {_: pkg[_] for _ in (\"name\", \"home-page\")} File \"/home/john/code/mars/docs/macros.py\", line 35, in <dictcomp> pkg = {_: pkg[_] for _ in (\"name\", \"home-page\")} TypeError: tuple indices must be integers or slices, not str","title":"Macro Rendering Error"},{"location":"license/","text":"MIT License Copyright (c) 2020 John Morris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/cli/","text":"Module that contains the command line application. get_parser () \u00a4 Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in mars_mcd_helper/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" return argparse . ArgumentParser ( prog = \"mars-mcd-helper\" ) main ( args = None ) \u00a4 Run the main program. This function is executed when you type mars-mcd-helper or python -m mars_mcd_helper . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in mars_mcd_helper/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `mars-mcd-helper` or `python -m mars_mcd_helper`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) print ( opts ) # noqa: WPS421 (side-effect in main is fine) return 0","title":"cli.py"},{"location":"reference/cli/#mars_mcd_helper.cli.get_parser","text":"Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in mars_mcd_helper/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" return argparse . ArgumentParser ( prog = \"mars-mcd-helper\" )","title":"get_parser()"},{"location":"reference/cli/#mars_mcd_helper.cli.main","text":"Run the main program. This function is executed when you type mars-mcd-helper or python -m mars_mcd_helper . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in mars_mcd_helper/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `mars-mcd-helper` or `python -m mars_mcd_helper`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) print ( opts ) # noqa: WPS421 (side-effect in main is fine) return 0","title":"main()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}