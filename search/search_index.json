{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mars-MCD-helper \u00a4 Utilities for retrieving and processing data from the Mars Climate Database. Currently nothing more than an interface to www-mars.lmd.jussie.fr . Usage \u00a4 from mars_mcd_helper import fetch_data , read_ascii_data outf = fetch_data ( outdir = \".\" , ls = 87.4 ) sections = read_ascii_data ( outf ) Requirements \u00a4 mars-MCD-helper requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12 Installation \u00a4 With pip : python -m pip install mars-mcd-helper # or python3.7 -m pip install mars-mcd-helper With pipx : python3.7 -m pip install --user pipx pipx install --python python3.7 mars-mcd-helper","title":"Overview"},{"location":"#mars-mcd-helper","text":"Utilities for retrieving and processing data from the Mars Climate Database. Currently nothing more than an interface to www-mars.lmd.jussie.fr .","title":"mars-MCD-helper"},{"location":"#usage","text":"from mars_mcd_helper import fetch_data , read_ascii_data outf = fetch_data ( outdir = \".\" , ls = 87.4 ) sections = read_ascii_data ( outf )","title":"Usage"},{"location":"#requirements","text":"mars-MCD-helper requires Python 3.7 or above. To install Python 3.7, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.7 pyenv install 3 .7.12 # make it available globally pyenv global system 3 .7.12","title":"Requirements"},{"location":"#installation","text":"With pip : python -m pip install mars-mcd-helper # or python3.7 -m pip install mars-mcd-helper With pipx : python3.7 -m pip install --user pipx pipx install --python python3.7 mars-mcd-helper","title":"Installation"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd mars-mcd-helper make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run mars-mcd-helper [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd mars-mcd-helper make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run mars-mcd-helper [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build mars-mcd-helper . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 autoflake | beautifulsoup4 | black | darglint | devtools | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | httpx | isort | jinja2-cli | mkdocs | mkdocs-coverage | mkdocs-macros-plugin | mkdocs-material | mkdocstrings | mypy | numpy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | requests | toml | wps-light Indirect dependencies \u00a4 ansimarkup | appdirs | astor | astunparse | atomicwrites | attrs | bandit | cached-property | certifi | charset-normalizer | click | colorama | coverage | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | GitPython | h11 | httpcore | idna | importlib-metadata | iniconfig | Jinja2 | Markdown | MarkupSafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pbr | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | PyYAML | pyyaml-env-tag | regex | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | stevedore | termcolor | typed-ast | typing-extensions | urllib3 | watchdog | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build mars-mcd-helper . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | beautifulsoup4 | black | darglint | devtools | duty | flake8-bandit | flake8-black | flake8-bugbear | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-pytest-style | flake8-string-format | flake8-tidy-imports | flake8-variables-names | git-changelog | httpx | isort | jinja2-cli | mkdocs | mkdocs-coverage | mkdocs-macros-plugin | mkdocs-material | mkdocstrings | mypy | numpy | pep8-naming | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | requests | toml | wps-light","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | appdirs | astor | astunparse | atomicwrites | attrs | bandit | cached-property | certifi | charset-normalizer | click | colorama | coverage | execnet | failprint | flake8 | flake8-plugin-utils | flake8-polyfill | ghp-import | gitdb | GitPython | h11 | httpcore | idna | importlib-metadata | iniconfig | Jinja2 | Markdown | MarkupSafe | mccabe | mergedeep | mkdocs-autorefs | mkdocs-material-extensions | mypy-extensions | packaging | pathspec | pbr | pluggy | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pytest-forked | python-dateutil | pytkdocs | PyYAML | pyyaml-env-tag | regex | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | stevedore | termcolor | typed-ast | typing-extensions | urllib3 | watchdog | zipp More credits from the author","title":"Indirect dependencies"},{"location":"license/","text":"MIT License Copyright (c) 2020 John Morris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/cli/","text":"Module that contains the command line application. get_parser () \u00a4 Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in mars_mcd_helper/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" return argparse . ArgumentParser ( prog = \"mars-mcd-helper\" ) main ( args = None ) \u00a4 Run the main program. This function is executed when you type mars-mcd-helper or python -m mars_mcd_helper . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in mars_mcd_helper/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `mars-mcd-helper` or `python -m mars_mcd_helper`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) print ( opts ) # noqa: WPS421 (side-effect in main is fine) return 0","title":"cli.py"},{"location":"reference/cli/#mars_mcd_helper.cli.get_parser","text":"Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in mars_mcd_helper/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" return argparse . ArgumentParser ( prog = \"mars-mcd-helper\" )","title":"get_parser()"},{"location":"reference/cli/#mars_mcd_helper.cli.main","text":"Run the main program. This function is executed when you type mars-mcd-helper or python -m mars_mcd_helper . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in mars_mcd_helper/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : \"\"\" Run the main program. This function is executed when you type `mars-mcd-helper` or `python -m mars_mcd_helper`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) print ( opts ) # noqa: WPS421 (side-effect in main is fine) return 0","title":"main()"},{"location":"reference/get_mars_data/","text":"Get data from the MCD by scraping the cgi interface. FetchingError \u00a4 Error fetching resource. fetch_data ( outdir = '.' , ** params ) \u00a4 Fetch data from the MCD and save in outdir. Parameters: Name Type Description Default outdir Union[pathlib.Path, str] dir to save in (Default value = \".\") '.' **params Parameters to override. {} Exceptions: Type Description FetchingError Failed to fetch requested data. Returns: Type Description (Path) output file. Source code in mars_mcd_helper/get_mars_data.py def fetch_data ( outdir : Union [ Path , str ] = \".\" , ** params ): \"\"\"Fetch data from the MCD and save in outdir. Args: outdir (Union[Path, str]): dir to save in (Default value = \".\") **params: Parameters to override. Raises: FetchingError: Failed to fetch requested data. Returns: (Path): output file. \"\"\" p = base_params . copy () p . update ( params ) logger . info ( \"Fetching page\" ) r = requests . get ( url , params = p ) if \"Ooops!\" in r . text : raise FetchingError ( f \"Failed to download, server said { r . text } \" ) soup = BeautifulSoup ( r . text , features = \"html.parser\" ) data_url = urlbase + soup . body . a [ \"href\" ] . replace ( \"../\" , \"\" ) logger . info ( f \"Fetching ascii data from { data_url } \" ) r = requests . get ( data_url ) if isinstance ( outdir , str ): outdir = Path ( outdir ) . expanduser () . resolve () fn = outdir / generate_fn ( ** params ) with fn . open ( \"w\" ) as f : f . write ( r . text ) return fn generate_fn ( ** params ) \u00a4 Generate a unique filename from given params. Parameters: Name Type Description Default **params params to consider. {} Returns: Type Description str (str): Fn from params. Source code in mars_mcd_helper/get_mars_data.py def generate_fn ( ** params ) -> str : \"\"\"Generate a unique filename from given params. Args: **params: params to consider. Returns: (str): Fn from params. \"\"\" fn = \"-\" . join ( str ( x ) for _ , x in params . items () if x ) return f \"marsdata_ { fn } .txt\"","title":"get_mars_data"},{"location":"reference/get_mars_data/#mars_mcd_helper.get_mars_data.FetchingError","text":"Error fetching resource.","title":"FetchingError"},{"location":"reference/get_mars_data/#mars_mcd_helper.get_mars_data.fetch_data","text":"Fetch data from the MCD and save in outdir. Parameters: Name Type Description Default outdir Union[pathlib.Path, str] dir to save in (Default value = \".\") '.' **params Parameters to override. {} Exceptions: Type Description FetchingError Failed to fetch requested data. Returns: Type Description (Path) output file. Source code in mars_mcd_helper/get_mars_data.py def fetch_data ( outdir : Union [ Path , str ] = \".\" , ** params ): \"\"\"Fetch data from the MCD and save in outdir. Args: outdir (Union[Path, str]): dir to save in (Default value = \".\") **params: Parameters to override. Raises: FetchingError: Failed to fetch requested data. Returns: (Path): output file. \"\"\" p = base_params . copy () p . update ( params ) logger . info ( \"Fetching page\" ) r = requests . get ( url , params = p ) if \"Ooops!\" in r . text : raise FetchingError ( f \"Failed to download, server said { r . text } \" ) soup = BeautifulSoup ( r . text , features = \"html.parser\" ) data_url = urlbase + soup . body . a [ \"href\" ] . replace ( \"../\" , \"\" ) logger . info ( f \"Fetching ascii data from { data_url } \" ) r = requests . get ( data_url ) if isinstance ( outdir , str ): outdir = Path ( outdir ) . expanduser () . resolve () fn = outdir / generate_fn ( ** params ) with fn . open ( \"w\" ) as f : f . write ( r . text ) return fn","title":"fetch_data()"},{"location":"reference/get_mars_data/#mars_mcd_helper.get_mars_data.generate_fn","text":"Generate a unique filename from given params. Parameters: Name Type Description Default **params params to consider. {} Returns: Type Description str (str): Fn from params. Source code in mars_mcd_helper/get_mars_data.py def generate_fn ( ** params ) -> str : \"\"\"Generate a unique filename from given params. Args: **params: params to consider. Returns: (str): Fn from params. \"\"\" fn = \"-\" . join ( str ( x ) for _ , x in params . items () if x ) return f \"marsdata_ { fn } .txt\"","title":"generate_fn()"},{"location":"reference/read_mars_data/","text":"Functions to parse data in the rather bespoke format used by the MCD. DataTable \u00a4 DataTable(data, xlabels, ylabels) __getnewargs__ ( self ) special \u00a4 Return self as a plain tuple. Used by copy and pickle. Source code in mars_mcd_helper/read_mars_data.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self ) __new__ ( _cls , data , xlabels , ylabels ) special staticmethod \u00a4 Create new instance of DataTable(data, xlabels, ylabels) __repr__ ( self ) special \u00a4 Return a nicely formatted representation string Source code in mars_mcd_helper/read_mars_data.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self parse_body ( body ) \u00a4 Parse body of data from the MCD. Parameters: Name Type Description Default body List[str] lines to parse. required Returns: Type Description DataTable (DataTable): The parsed data. Source code in mars_mcd_helper/read_mars_data.py def parse_body ( body : List [ str ]) -> \"DataTable\" : \"\"\" Parse body of data from the MCD. Args: body (List[str]): lines to parse. Returns: (DataTable): The parsed data. \"\"\" # here we use the map (/reduce, but here we don't reduce) paradigm # to show how sometimes functional programming is a *lot* simpler # than writing the loops out by hand. # map applies a function (here an anonymous function decared with lambda) # over an iterable # numpy has it's own map/reduce fns which are implemented in C # and can be a lot faster than python's. body = map ( lambda row : \" \" . join ( row . strip () . split ()), body ) body = list ( body ) xlabels = body [ 0 ] . split ( \"||\" )[ 1 ] . strip () . split ( \" \" ) body = body [ 2 :] xlabels = map ( parse_number , xlabels ) ylabels = map ( lambda row : row . split ( \"||\" )[ 0 ] . strip (), body ) ylabels = map ( parse_number , ylabels ) data = map ( lambda row : row . split ( \"||\" )[ 1 ] . strip () . split ( \" \" ), body ) data = np . array ( list ( data ), dtype = float ) return DataTable ( np . rot90 ( data ), list ( xlabels ), list ( ylabels )) parse_header ( lines ) \u00a4 Parse header. Parameters: Name Type Description Default lines List[str] lines to parse. required Returns: Type Description dict Dict representing extracted data. Source code in mars_mcd_helper/read_mars_data.py def parse_header ( lines : List [ str ]) -> dict : \"\"\"Parse header. Args: lines (List[str]): lines to parse. Returns: Dict representing extracted data. \"\"\" # written to be readable by people beginning python, so rather verbose. data = {} match = re . search ( \"MCD_(.+) with (.+).\" , lines [ 0 ]) if match : data [ \"mcd_version\" ] = match . group ( 1 ) data [ \"model\" ] = match . group ( 2 ) match = re . search ( \"Ls (.+). Altitude (.+) ALS Local time (.+)\" , lines [ 1 ]) if match : data [ \"ls\" ] = match . group ( 1 ) data [ \"altitude\" ] = match . group ( 2 ) data [ \"local_time\" ] = match . group ( 3 ) . strip () assert \"-\" * 6 in lines [ 2 ] match = re . search ( \"Column 1 is (.+)\" , lines [ 3 ]) if match : data [ \"column_1\" ] = match . group ( 1 ) match = re . search ( r \"Columns 2\\+ are (.+)\" , lines [ 4 ]) if match : data [ \"variable\" ] = match . group ( 1 ) match = re . search ( \"Line 1 is (.+)\" , lines [ 5 ]) if match : data [ \"keys\" ] = match . group ( 1 ) assert \"-\" * 6 in lines [ 6 ] match = re . search ( \"Retrieved on: (.+)\" , lines [ 7 ]) if match : data [ \"retrieval_date\" ] = datetime . fromisoformat ( match . group ( 1 )) return data parse_number ( num ) \u00a4 Parse a number into the best representation. Return None if not possible. Parameters: Name Type Description Default num str number to parse. required Returns: Type Description Union[float, int] (float or int or None): parsed number. Source code in mars_mcd_helper/read_mars_data.py def parse_number ( num : str ) -> Union [ float , int , None ]: \"\"\" Parse a number into the best representation. Return None if not possible. Args: num (str): number to parse. Returns: (float or int or None): parsed number. \"\"\" if num == \"----\" : return None if \".\" in num : return float ( num ) try : return int ( num ) except ValueError : return float ( num ) read_ascii_data ( dataf ) \u00a4 Parse a file downloaded from the MCD. Parameters: Name Type Description Default dataf Path The file to pass. required Returns: Type Description dict (dict): The data. Source code in mars_mcd_helper/read_mars_data.py def read_ascii_data ( dataf : Path ) -> dict : \"\"\" Parse a file downloaded from the MCD. Args: dataf (Path): The file to pass. Returns: (dict): The data. \"\"\" sections = {} with dataf . open () as f : row = f . readline () while True : if not row : break while \"#\" * 8 not in row : # start header section row = f . readline () row = f . readline () # skip ###### row header = [] while \"#\" * 8 not in row : header . append ( row ) row = f . readline () header = parse_header ( header ) # parse body body = [] row = f . readline () while row and \"#\" * 8 not in row : # start header section body . append ( row ) row = f . readline () body = parse_body ( body ) header [ \"data\" ] = body sections [ header [ \"variable\" ]] = header return sections","title":"read_mars_data"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.DataTable","text":"DataTable(data, xlabels, ylabels)","title":"DataTable"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.DataTable.__getnewargs__","text":"Return self as a plain tuple. Used by copy and pickle. Source code in mars_mcd_helper/read_mars_data.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self )","title":"__getnewargs__()"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.DataTable.__new__","text":"Create new instance of DataTable(data, xlabels, ylabels)","title":"__new__()"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.DataTable.__repr__","text":"Return a nicely formatted representation string Source code in mars_mcd_helper/read_mars_data.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self","title":"__repr__()"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.parse_body","text":"Parse body of data from the MCD. Parameters: Name Type Description Default body List[str] lines to parse. required Returns: Type Description DataTable (DataTable): The parsed data. Source code in mars_mcd_helper/read_mars_data.py def parse_body ( body : List [ str ]) -> \"DataTable\" : \"\"\" Parse body of data from the MCD. Args: body (List[str]): lines to parse. Returns: (DataTable): The parsed data. \"\"\" # here we use the map (/reduce, but here we don't reduce) paradigm # to show how sometimes functional programming is a *lot* simpler # than writing the loops out by hand. # map applies a function (here an anonymous function decared with lambda) # over an iterable # numpy has it's own map/reduce fns which are implemented in C # and can be a lot faster than python's. body = map ( lambda row : \" \" . join ( row . strip () . split ()), body ) body = list ( body ) xlabels = body [ 0 ] . split ( \"||\" )[ 1 ] . strip () . split ( \" \" ) body = body [ 2 :] xlabels = map ( parse_number , xlabels ) ylabels = map ( lambda row : row . split ( \"||\" )[ 0 ] . strip (), body ) ylabels = map ( parse_number , ylabels ) data = map ( lambda row : row . split ( \"||\" )[ 1 ] . strip () . split ( \" \" ), body ) data = np . array ( list ( data ), dtype = float ) return DataTable ( np . rot90 ( data ), list ( xlabels ), list ( ylabels ))","title":"parse_body()"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.parse_header","text":"Parse header. Parameters: Name Type Description Default lines List[str] lines to parse. required Returns: Type Description dict Dict representing extracted data. Source code in mars_mcd_helper/read_mars_data.py def parse_header ( lines : List [ str ]) -> dict : \"\"\"Parse header. Args: lines (List[str]): lines to parse. Returns: Dict representing extracted data. \"\"\" # written to be readable by people beginning python, so rather verbose. data = {} match = re . search ( \"MCD_(.+) with (.+).\" , lines [ 0 ]) if match : data [ \"mcd_version\" ] = match . group ( 1 ) data [ \"model\" ] = match . group ( 2 ) match = re . search ( \"Ls (.+). Altitude (.+) ALS Local time (.+)\" , lines [ 1 ]) if match : data [ \"ls\" ] = match . group ( 1 ) data [ \"altitude\" ] = match . group ( 2 ) data [ \"local_time\" ] = match . group ( 3 ) . strip () assert \"-\" * 6 in lines [ 2 ] match = re . search ( \"Column 1 is (.+)\" , lines [ 3 ]) if match : data [ \"column_1\" ] = match . group ( 1 ) match = re . search ( r \"Columns 2\\+ are (.+)\" , lines [ 4 ]) if match : data [ \"variable\" ] = match . group ( 1 ) match = re . search ( \"Line 1 is (.+)\" , lines [ 5 ]) if match : data [ \"keys\" ] = match . group ( 1 ) assert \"-\" * 6 in lines [ 6 ] match = re . search ( \"Retrieved on: (.+)\" , lines [ 7 ]) if match : data [ \"retrieval_date\" ] = datetime . fromisoformat ( match . group ( 1 )) return data","title":"parse_header()"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.parse_number","text":"Parse a number into the best representation. Return None if not possible. Parameters: Name Type Description Default num str number to parse. required Returns: Type Description Union[float, int] (float or int or None): parsed number. Source code in mars_mcd_helper/read_mars_data.py def parse_number ( num : str ) -> Union [ float , int , None ]: \"\"\" Parse a number into the best representation. Return None if not possible. Args: num (str): number to parse. Returns: (float or int or None): parsed number. \"\"\" if num == \"----\" : return None if \".\" in num : return float ( num ) try : return int ( num ) except ValueError : return float ( num )","title":"parse_number()"},{"location":"reference/read_mars_data/#mars_mcd_helper.read_mars_data.read_ascii_data","text":"Parse a file downloaded from the MCD. Parameters: Name Type Description Default dataf Path The file to pass. required Returns: Type Description dict (dict): The data. Source code in mars_mcd_helper/read_mars_data.py def read_ascii_data ( dataf : Path ) -> dict : \"\"\" Parse a file downloaded from the MCD. Args: dataf (Path): The file to pass. Returns: (dict): The data. \"\"\" sections = {} with dataf . open () as f : row = f . readline () while True : if not row : break while \"#\" * 8 not in row : # start header section row = f . readline () row = f . readline () # skip ###### row header = [] while \"#\" * 8 not in row : header . append ( row ) row = f . readline () header = parse_header ( header ) # parse body body = [] row = f . readline () while row and \"#\" * 8 not in row : # start header section body . append ( row ) row = f . readline () body = parse_body ( body ) header [ \"data\" ] = body sections [ header [ \"variable\" ]] = header return sections","title":"read_ascii_data()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}